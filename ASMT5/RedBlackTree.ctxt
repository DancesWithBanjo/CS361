#BlueJ class context
comment0.params=
comment0.target=RedBlackTree()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ RedBlackTree\r\n
comment1.params=key\ value
comment1.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment1.text=\r\n\ Adds\ a\ new\ key-value\ pair\ to\ the\ tree\r\n
comment10.params=key
comment10.target=boolean\ contains(java.lang.Comparable)
comment10.text=\r\n\ Checks\ if\ a\ key\ is\ within\ the\ tree\r\n\ \r\n\ @params\ key\:\ the\ key\ whose\ presence\ we're\ checking\ for\r\n
comment11.params=
comment11.target=boolean\ isEmpty()
comment11.text=\r\n\ Checks\ if\ the\ tree\ is\ empty\ or\ not\r\n
comment12.params=node
comment12.target=boolean\ isRed(RedBlackTree.Node)
comment13.params=node\ key
comment13.target=RedBlackTree.Node\ findNode(RedBlackTree.Node,\ java.lang.Comparable)
comment14.params=node
comment14.target=RedBlackTree.Node\ fallRight(RedBlackTree.Node)
comment15.params=node
comment15.target=RedBlackTree.Node\ fallLeft(RedBlackTree.Node)
comment16.params=node
comment16.target=RedBlackTree.Node\ rotateLeft(RedBlackTree.Node)
comment17.params=node
comment17.target=RedBlackTree.Node\ rotateRight(RedBlackTree.Node)
comment18.params=node\ key\ value
comment18.target=RedBlackTree.Node\ findAndAdd(RedBlackTree.Node,\ java.lang.Comparable,\ java.lang.Object)
comment2.params=key
comment2.target=java.lang.Object\ get(java.lang.Comparable)
comment2.text=\r\n\ Finds\ the\ value\ of\ the\ inputed\ key\r\n\ \r\n\ @params\ key\:\ the\ key\ of\ whose\ value\ we're\ looking\ for\r\n
comment3.params=node\ key
comment3.target=java.lang.Object\ get(RedBlackTree.Node,\ java.lang.Comparable)
comment4.params=key
comment4.target=void\ delete(java.lang.Comparable)
comment5.params=
comment5.target=int\ size()
comment5.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ the\ tree\r\n
comment6.params=
comment6.target=java.lang.Comparable\ getMinKey()
comment6.text=\r\n\ Returns\ the\ first\ ordered\ key\ in\ the\ tree\r\n
comment7.params=
comment7.target=java.lang.Comparable\ getMaxKey()
comment7.text=\r\n\ Returns\ the\ last\ ordered\ key\ in\ the\ tree\r\n
comment8.params=key
comment8.target=java.lang.Comparable\ findPredecessor(java.lang.Comparable)
comment8.text=\r\n\ Returns\ the\ preceding\ key\ from\ the\ inputed\ key\r\n\ \r\n\ @params\ key\:\ the\ key\ whose\ predecessor\ we're\ looking\ for\r\n
comment9.params=key
comment9.target=java.lang.Comparable\ findSuccessor(java.lang.Comparable)
comment9.text=\r\n\ Returns\ the\ succeding\ key\ from\ the\ inputed\ key\r\n\ \r\n\ @params\ key\:\ the\ key\ whose\ successor\ we're\ looking\ for\r\n
numComments=19
